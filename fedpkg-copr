#!/usr/bin/python
# fedpkg - a script to interact with the Fedora Packaging system
#
# Copyright (C) 2011 Red Hat Inc.
# Author(s): Jesse Keating <jkeating@redhat.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See http://www.gnu.org/copyleft/gpl.html for
# the full text of the license.

import os
import sys
import logging
import ConfigParser
import argparse

import pyrpkg
import fedpkg

import urlparse
import posixpath

class CoprCommands(fedpkg.Commands):
    def load_module_name(self):
        """Loads a package module."""

        try:
            if self.push_url:
                parts = urlparse.urlparse(self.push_url)
                #module_name = posixpath.basename(parts.path)
                module_name = "/".join(posixpath.normpath(parts.path).split("/")[-3:])
                if module_name.endswith('.git'):
                    module_name = module_name[:-len('.git')]
                self._module_name = module_name
                return
        except pyrpkg.rpkgError:
            self.log.info('Failed to get module name from Git url or pushurl')

        self.load_nameverrel()
        if self._module_name_spec:
            self._module_name = self._module_name_spec
            return

        raise pyrpkg.rpkgError('Could not find current module name.'
                        ' Use --module-name.')


class fedpkgCoprClient(fedpkg.cli.fedpkgClient):
    def load_cmd(self):
        """This sets up the cmd object"""

        # Set target if we got it as an option
        target = None
        if hasattr(self.args, 'target') and self.args.target:
            target = self.args.target

        # load items from the config file
        items = dict(self.config.items(self.name, raw=True))

        # Create the cmd object
        self._cmd = CoprCommands(self.args.path,
                                       items['lookaside'],
                                       items['lookasidehash'],
                                       items['lookaside_cgi'],
                                       items['gitbaseurl'],
                                       items['anongiturl'],
                                       items['branchre'],
                                       items['kojiconfig'],
                                       items['build_client'],
                                       user=self.args.user,
                                       dist=self.args.dist,
                                       target=target,
                                       quiet=self.args.q,
                                       )

        self._cmd.module_name = self.args.module_name
        self._cmd.password = self.args.password
        self._cmd.runas = self.args.runas


def main():
    # Setup an argparser and parse the known commands to get the config file
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('-C', '--config', help='Specify a config file to use',
                        default='/etc/rpkg/fedpkg-copr.conf')

    (args, other) = parser.parse_known_args()

    # Make sure we have a sane config file
    if not os.path.exists(args.config) and not other[-1] in ['--help', '-h', 'help']:
        sys.stderr.write('Invalid config file %s\n' % args.config)
        sys.exit(1)

    # Setup a configuration object and read config file data
    config = ConfigParser.SafeConfigParser()
    config.read(args.config)

    client = fedpkgCoprClient(config)
    client.do_imports(site='fedpkg')
    client.parse_cmdline()

    if not client.args.path:
        try:
            client.args.path = os.getcwd()
        except:
            print('Could not get current path, have you deleted it?')
            sys.exit(1)

    # setup the logger -- This logger will take things of INFO or DEBUG and
    # log it to stdout.  Anything above that (WARN, ERROR, CRITICAL) will go
    # to stderr.  Normal operation will show anything INFO and above.
    # Quiet hides INFO, while Verbose exposes DEBUG.  In all cases WARN or
    # higher are exposed (via stderr).
    log = pyrpkg.log
    client.setupLogging(log)

    if client.args.v:
        log.setLevel(logging.DEBUG)
    elif client.args.q:
        log.setLevel(logging.WARNING)
    else:
        log.setLevel(logging.INFO)

    # Run the necessary command
    try:
        sys.exit(client.args.command())
    except KeyboardInterrupt:
        pass
    except Exception, e:
        log.error('Could not execute %s: %s' % (client.args.command.__name__, e))
        if client.args.v:
            raise
        sys.exit(1)

if __name__ == "__main__":
    main()
